
import torch.nn as nn
import torch

# 首先说明一下,两种残差结构:卷积+实线残差;卷积+虚线残差
class BasicBlock(nn.Module):  # 定义的是18层和34层resnet中每一个残差结构(有两层卷积+一个残差)
    expansion = 1  # 18层和34层的残差结构中的第一层和第二层的卷积核的个数是一样的(也就是上一层的卷积核的个数(卷积层的输出的feature map个数)==下一层的卷积核的个数(卷积层的输出的feature map个数))

    # expation设为1就是因为在18，34层中每一个卷积层中卷积核的个并没有发生变化
    def __init__(self, in_channel, out_channel, stride=1, downsample=None):  # download是指虚线的捷径中设置的卷积层，简称“下采样”
        super(BasicBlock, self).__init__()
        self.conv1 = nn.Conv2d(in_channels=in_channel, out_channels=out_channel,  # 一个残差结构中的第一个卷积层
                               kernel_size=3, stride=stride, padding=1,
                               bias=False)  # 当使用的是虚线的残差结构时，传入的stride就会是2,此时这个卷积层起到的作用就是将input的size所谓原来的一半
        self.bn1 = nn.BatchNorm2d(out_channel)  # bn层
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv2d(in_channels=out_channel, out_channels=out_channel,
                               kernel_size=3, stride=1, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(out_channel)
        self.downsample = downsample  # 下采样默认赋值为空

    def forward(self, x):
        identity = x  # 先预留输入的特征矩阵
        if self.downsample is not None:  # 如果有下采样，说明是实线残差
            identity = self.downsample(x)  # 处理输入的特征矩阵

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)

        out += identity  # 加上初始矩阵
        out = self.relu(out)

        return out

class ResNet(nn.Module):

    def __init__(self, block, blocks_num, num_classes=1000, include_top=True):

        super(ResNet, self).__init__()
        self.include_top = include_top
        self.in_channel = 64  # 输入特征图的深度(经过初始的maxpooling之后的特征图)

        self.conv1 = nn.Conv2d(3, self.in_channel, kernel_size=7, stride=2,  # 注意哦，self.in_channel是作为第一个卷积层的输出个数
                               padding=3, bias=False)
        self.bn1 = nn.BatchNorm2d(self.in_channel)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)  # 最大池化操作
        self.layer1 = self._make_layer(block, 64, blocks_num[0])  # 第一个残差层 Conv_2
        self.layer2 = self._make_layer(block, 128, blocks_num[1], stride=2)  # 第二个残差层 Conv_3
        self.layer3 = self._make_layer(block, 256, blocks_num[2], stride=2)  # 第三个残差层 Conv_4
        self.layer4 = self._make_layer(block, 512, blocks_num[3], stride=2)  # 第四个残差层 Conv_5
        if self.include_top:
            self.avgpool = nn.AdaptiveAvgPool2d((1, 1))  # output size = (1, 1)
            self.fc = nn.Linear(512 * block.expansion, num_classes)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')

    def _make_layer(self, block, channel, block_num, stride=1):  # stride=1指的是stride默认是1的意思


        downsample = None  # 下采样函数初始化


        if stride != 1 or self.in_channel != channel * block.expansion:
            downsample = nn.Sequential(  # 生成下采样函数
                nn.Conv2d(self.in_channel, channel * block.expansion, kernel_size=1, stride=stride, bias=False),
                # 虚线残差卷积核个数要乘4倍
                nn.BatchNorm2d(channel * block.expansion))

        layers = []
        layers.append(block(self.in_channel, channel, downsample=downsample, stride=stride))
        self.in_channel = channel * block.expansion  # 要及时修正作为下一个残差结构的输入值

        for _ in range(1, block_num):
            layers.append(block(self.in_channel, channel))

        return nn.Sequential(*layers)

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.maxpool(x)

        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        if self.include_top:
            x = self.avgpool(x)
            x = torch.flatten(x, 1)
            x = self.fc(x)

        return x

def resnet18(num_classes=168, include_top=True):
    return ResNet(BasicBlock, [2, 2, 2, 2], num_classes=num_classes, include_top=include_top)

def resnet34(num_classes=1000, include_top=True):
    return ResNet(BasicBlock, [3, 4, 6, 3], num_classes=num_classes, include_top=include_top)

def resnet50(num_classes=4, include_top=True):
    return ResNet(BasicBlock, [3, 4, 6, 3], num_classes=num_classes, include_top=include_top)
